rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

       function isAuthorized() {
          return request.auth != null;
       }

        function readUserLocation(){
           let requestedUserSpaceIds = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.space_ids;
           let resourceUserSpaceIds = get(/databases/$(database)/documents/users/$(resource.data.user_id)).data.space_ids;
           return requestedUserSpaceIds.hasAny(resourceUserSpaceIds);
        }

        match /users/{docId} {
          allow create : if isAuthorized() && request.auth.uid == resource.data.id &&
                         request.resource.data.keys().hasAll(["id", "auth_type", "first_name","location_enabled","provider_firebase_id_token","created_at"]) &&
                         request.resource.data.keys().hasAny(["email", "phone"]) &&
                         request.resource.data.id is string &&
                         request.resource.data.auth_type is int &&
                         (request.resource.data.auth_type == 1 || request.resource.data.auth_type == 2) &&
                         request.resource.data.location_enabled is bool &&
                         request.resource.data.provider_firebase_id_token is string &&
                         request.resource.data.created_at is int &&
                         request.resource.data.first_name is string &&
                         request.resource.data.get('phone', '') is string &&
                         request.resource.data.get('email', '') is string &&
                         request.resource.data.get('last_name', '') is string &&
                         request.resource.data.get('profile_image', '') is string &&
                         request.resource.data.get('space_ids', []) is list;

          allow update: if isAuthorized() && request.auth.uid == resource.data.id &&
                        request.resource.data.diff(resource.data).affectedKeys()
                            .hasAny(['first_name', 'last_name', 'profile_image', 'location_enabled', 'space_ids']) &&
                         request.resource.data.first_name is string &&
                        request.resource.data.get('last_name', '') is string &&
                        request.resource.data.location_enabled is bool &&
                        request.resource.data.get('space_ids', []) is list ;

          allow delete : if isAuthorized() && request.auth.uid == resource.data.id;
          allow read: if isAuthorized() && (request.auth.uid == resource.data.id ||
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.space_ids.hasAny(resource.data.space_ids));

            match /user_locations/{docId} {
                allow read: if isAuthorized() && readUserLocation();
                allow update: if false;
                allow delete: if isAuthorized() && request.auth.uid == resource.data.user_id;
                allow create: if isAuthorized() && request.auth.uid == resource.data.user_id &&
                                         request.resource.data.keys().hasAll(["id", "user_id", "latitude","longitude","created_at"]) &&
                                         request.resource.data.id is string &&
                                         request.resource.data.user_id is string &&
                                         request.resource.data.latitude is int &&
                                         request.resource.data.longitude is int &&
                                         request.resource.data.created_at is int;
            }

            match /user_sessions/{docId} {
                allow read: if  isAuthorized() && request.auth.uid == resource.data.user_id;
                allow create : if isAuthorized() && request.auth.uid == resource.data.user_id &&
                                         request.resource.data.keys().hasAll(["id", "user_id", "device_id",
                                             "fcm_token","device_name","platform","session_active","app_version","created_at"]) &&
                                         request.resource.data.id is string &&
                                         request.resource.data.user_id is string &&
                                         request.resource.data.device_id is string &&
                                         request.resource.data.fcm_token is string &&
                                         request.resource.data.device_name is string &&
                                         request.resource.data.platform is int &&
                                         request.resource.data.platform == 1 &&
                                         request.resource.data.session_active is bool &&
                                         request.resource.data.app_version is int &&
                                         request.resource.data.created_at is int;
               allow delete: if isAuthorized() && request.auth.uid == resource.data.user_id;
               allow update: if false;
            }
        }

        function isSpaceAdmin() {
           let spaceId = resource.data.space_id;
           let adminId = get(/databases/$(database)/documents/spaces/$(spaceId)).data.admin_id;
           return request.auth.uid == adminId;
        }

        function isSpaceAdminOrMember() {
            let spaceId = resource.data.space_id;
            let isMember = exists(/databases/$(database)/documents/spaces/$(spaceId)/space_members/$(request.auth.uid));
            return isSpaceAdmin() || isMember;
        }

        match /spaces/{docId} {

           allow write: if isAuthorized() &&  request.auth.uid == resource.data.admin_id;
           allow read: if isAuthorized() && isSpaceAdminOrMember();

            match /space_members/{docId} {
                allow write: if  isAuthorized() && (isSpaceAdmin() || request.auth.uid == resource.data.user_id);
                allow read: if  isAuthorized() &&  isSpaceAdminOrMember();
            }
        }

        match /space_invitations/{docId} {
            allow write: if  isAuthorized() && isSpaceAdmin();
            allow read: if  isAuthorized()
        }
  }
}