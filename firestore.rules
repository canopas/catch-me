rules_version = '2';

service cloud.firestore {
    match /databases/{database}/documents {

        function isAuthorized() {
            return request.auth != null;
        }

        function readUserLocation(){
           let requestedUserSpaceIds = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.space_ids;
           let resourceUserSpaceIds = get(/databases/$(database)/documents/users/$(resource.data.user_id)).data.space_ids;
           return requestedUserSpaceIds.hasAny(resourceUserSpaceIds);
        }

        match /users/{docId} {
            allow create : if isAuthorized() && request.auth.uid == docId &&
                request.resource.data.keys().hasAll(["id", "auth_type", "location_enabled","provider_firebase_id_token","created_at"]) &&
                request.resource.data.keys().hasAny(["email", "phone"])  &&
                request.resource.data.id is string &&
                request.resource.data.auth_type is int &&
                (request.resource.data.auth_type == 1 || request.resource.data.auth_type == 2) &&
                request.resource.data.location_enabled is bool &&
                request.resource.data.provider_firebase_id_token is string &&
                request.resource.data.created_at is int &&
                request.resource.data.get('first_name', '') is string &&
                request.resource.data.get('phone', '') is string &&
                request.resource.data.get('email', '') is string &&
                request.resource.data.get('last_name', '') is string &&
                request.resource.data.get('profile_image', '') is string &&
                request.resource.data.get('space_ids', []) is list;

           allow update: if isAuthorized() && request.auth.uid == resource.data.id &&
                request.resource.data.diff(resource.data).affectedKeys().hasAny(['first_name', 'last_name', 'profile_image', 'location_enabled', 'space_ids','phone', 'email']) &&
                request.resource.data.first_name is string &&
                request.resource.data.get('last_name', '') is string &&
                request.resource.data.location_enabled is bool &&
                request.resource.data.get('space_ids', []) is list;

          allow delete: if isAuthorized() && request.auth.uid == resource.data.id;
          allow read: if isAuthorized() && (request.auth.uid == docId ||
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.space_ids.hasAny(resource.data.space_ids));

        match /user_locations/{docId} {
            allow read: if isAuthorized() && (request.auth.uid == resource.data.user_id || readUserLocation());
            allow update: if false;
            allow delete: if isAuthorized() && request.auth.uid == resource.data.user_id;
            allow create: if isAuthorized() && request.auth.uid == request.resource.data.user_id &&
                                         request.resource.data.keys().hasAll(["id", "user_id", "latitude","longitude","created_at"]) &&
                                         request.resource.data.id is string &&
                                         request.resource.data.user_id is string &&
                                         request.resource.data.latitude is number &&
                                         request.resource.data.longitude is number &&
                                         request.resource.data.created_at is int;
            }

            match /user_sessions/{docId} {
                allow read: if isAuthorized() && request.auth.uid == resource.data.user_id;
                allow create : if isAuthorized() && request.auth.uid == request.resource.data.user_id &&
                                         request.resource.data.keys().hasAll(["id", "user_id", "device_id",
                                             "fcm_token","device_name","platform","session_active","app_version","created_at"]) &&
                                         request.resource.data.id is string &&
                                         request.resource.data.user_id is string &&
                                         request.resource.data.device_id is string &&
                                         request.resource.data.fcm_token is string &&
                                         request.resource.data.device_name is string &&
                                         request.resource.data.platform is int &&
                                         request.resource.data.platform == 1 &&
                                         request.resource.data.session_active is bool &&
                                         request.resource.data.app_version is int &&
                                         request.resource.data.created_at is int;
               allow delete: if isAuthorized() && request.auth.uid == resource.data.user_id;
               allow update: if false;
            }
        }

        function isSpaceAdmin(spaceId) {
           let adminId = get(/databases/$(database)/documents/spaces/$(spaceId)).data.admin_id;
           return request.auth.uid == adminId;
        }

         function isSpaceMember(spaceId) {
           let isMember = exists(/databases/$(database)/documents/spaces/$(spaceId)/space_members/$(request.auth.uid));
           return isMember;
        }

        match /spaces/{docId} {
           allow read: if true;
           allow delete: if isAuthorized() && request.auth.uid == resource.data.admin_id;
           allow update: if isAuthorized() && request.auth.uid == resource.data.admin_id &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(["name"]) &&
                         request.resource.data.name is string;
           allow create: if isAuthorized() &&
                        request.resource.data.keys().hasAll(["id", "admin_id", "name", "created_at"]) &&
                        request.resource.data.id is string &&
                        request.resource.data.admin_id is string &&
                        request.resource.data.name is string &&
                        request.resource.data.created_at is int;


        }

       match /{path=**}/space_members/{member} {
          allow read: if isAuthorized() && (request.auth.uid == resource.data.user_id || isSpaceMember(resource.data.space_id));
          allow write: if false;
        }

       match /spaces/{spaceId}/space_members/{member} {
          allow read: if isAuthorized() && (request.auth.uid == resource.data.user_id || isSpaceMember(spaceId));
          allow delete: if isAuthorized() && (isSpaceAdmin(resource.data.space_id) || request.auth.uid == resource.data.user_id);
          allow update: if isAuthorized() && request.auth.uid == resource.data.user_id &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["location_enabled"])&&
                        request.resource.data.location_enabled is bool;
          allow create: if  isAuthorized() && (isSpaceAdmin(request.resource.data.space_id) || request.auth.uid == request.resource.data.user_id) &&
                       request.resource.data.keys().hasAll(["id", "space_id", "user_id", "role", "location_enabled", "created_at"]) &&
                       request.resource.data.id is string &&
                       request.resource.data.space_id is string &&
                       request.resource.data.user_id is string &&
                       request.resource.data.role is int &&
                       (request.resource.data.role == 1 || request.resource.data.role == 2) &&
                       request.resource.data.location_enabled is bool &&
                       request.resource.data.created_at is int;
        }

        match /space_invitations/{docId} {
            allow read: if  isAuthorized();
            allow delete: if  isAuthorized() && isSpaceAdmin(resource.data.space_id);
            allow update: if  isAuthorized() && isSpaceAdmin(resource.data.space_id) &&
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(["code"]) &&
                            request.resource.data.code is string &&
                            request.resource.data.code.length == 6;

            allow create: if isAuthorized() && isSpaceAdmin(request.resource.data.space_id) &&
                           request.resource.data.keys().hasAll(["id", "code", "space_id", "created_at"]) &&
                           request.resource.data.id is string &&
                           request.resource.data.space_id is string &&
                           request.resource.data.code is string &&
                           request.resource.data.code.size() == 6 &&
                           request.resource.data.created_at is int;
        }
  }
}